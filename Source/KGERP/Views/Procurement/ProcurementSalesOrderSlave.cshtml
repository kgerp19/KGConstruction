@model KGERP.Services.Procurement.VMSalesOrderSlave
@using KGERP.Utility;


@{
    ViewData["Title"] = "Project Division";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
    /*
    .premium-form {
        padding: 20px;
        background-color: #f9f9f9;
        Light background border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .premium-input, .premium-select {
        border: 1px solid #ccc;
        border-radius: 5px;
        transition: border-color 0.3s;
    }

        .premium-input:focus, .premium-select:focus {
            border-color: #007bff;
            Primary color box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .premium-textarea {
        border-radius: 5px;
        resize: none;
        Prevent resizing
    }

    .premium-error {
        font-size: 0.875rem;
        Smaller font for error messages
    }

    .form-group {
        margin-bottom: 20px;
        Space between form groups
    }

    label {
        font-weight: bold;
        color: #333;
        Darker label color
    }

    .premium-button {
        background-color: #007bff;
        Primary button color color: #ffffff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        Larger font size cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

        .premium-button:hover {
            background-color: #0056b3;
            Darker shade on hover transform: scale(1.05);
            Slight scaling effect
        }

        .premium-button:focus {
            outline: none;
            Remove default outline box-shadow: 0 0 5px rgba(0, 123, 255, 0.4);
            Focus effect
        }*/
</style>

<section class="content-header">
    <h1>

        <span>Project Division</span>

    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Project Division</li>
        <li class="active">

            <a class="btn-link btn btn-primary btn-xs" target="_blank" href="~/Procurement/ProcurementSalesOrderSlave?companyId=@Model.CompanyFK">Add New Project Division</a>

        </li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="box">

            <div class="box-danger">

                <div class="box-header" style="background: linear-gradient(135deg, #e6f2ff, #cce5ff); border-radius: 15px; padding: 20px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);">
                    @if (Model.CostCenterId > 0)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="d-flex align-items-center">

                                    <table class="table" style="margin: 0; color: #343a40;">
                                        <tr>
                                            <th style="width:15%; font-weight: bold; font-size: 1.2rem; color: #007bff;">Project Type</th>
                                            <th style="width:1%">:</th>
                                            <td style="width:30%">
                                                <label class="col-form-label" style="font-size: 1.5rem; color: #333;">@Model.CostCenterType</label>
                                            </td>
                                            <th style="width:23%; font-weight: bold; font-size: 1.2rem; color: #007bff;">Project / Cost Center</th>
                                            <th style="width:1%">:</th>
                                            <td style="width:30%">
                                                <label class="col-form-label" style="font-size: 1.5rem; color: #333;">@Model.CostCenterName</label>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="tooltip" style="position: absolute; top: 10px; right: 10px;">
                                    <i class="fa fa-info-circle" style="color: #007bff; cursor: pointer;" title="Additional project information"></i>
                                </div>
                            </div>
                        </div>
                    }
                </div>





                <div class="box-body">

                    @using (Html.BeginForm("ProcurementSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "procurementSalesOrderSlaveFormId", @class = "formValidator" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                        @Html.HiddenFor(model => model.CostCenterId, new { id = "hidCostCenterId" })

                        @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                        @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                        @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })


                        <div class="box-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="txtCustomerPONo" class="col-form-label">Division Name</label>
                                        @Html.EditorFor(model => model.CustomerPONo, new { htmlAttributes = new { @class = "form-control", @id = "txtCustomerPONo" } })
                                        @Html.ValidationMessageFor(model => model.CustomerPONo, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="message-text" class="col-form-label"> Project Manager:</label>
                                        @Html.EditorFor(model => model.OfficerNAme, new { htmlAttributes = new { @class = "form-control", @name = "OfficerNAme", @id = "OfficerNAme", required = "required" } })

                                        @Html.ValidationMessageFor(model => model.OfficerNAme, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(x => x.SalePersonId, new { @id = "SalePersonId", @name = "SalePersonId" })

                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="VendorName" class="col-form-label">Customer:</label>
                                        @Html.EditorFor(model => model.CommonCustomerName, new { htmlAttributes = new { @class = "form-control", @name = "CustomerName", @id = "VendorName", required = "required" } })
                                        @Html.ValidationMessageFor(model => model.CommonCustomerName, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(x => x.CustomerId, new { @id = "Vendor", @name = "Vendor" })
                                    </div>
                                </div>





                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Start Date</label>
                                        <div style="display:flex">
                                            <input name="OrderDate" asp-for="OrderDate" type="text" value="@DateTime.Today.ToString("yyyy-MM-dd")" required class="datepicker form-control premium-input" id="txtOrderDate" placeholder="Date" autocomplete="off">

                                        </div>
                                        @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>


                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Expected Delivery Date</label>
                                        <div style="display:flex">
                                            <input name="ExpectedDeliveryDate" asp-for="ExpectedDeliveryDate" type="text" required class="datepicker form-control premium-input" id="txtDeliveryDate" placeholder="Expected Delivery Date" autocomplete="off">

                                        </div>
                                        @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>


                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Warehouse</label>
                                        @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Select Warehouse==", new { id = "ddlWareHouseFk", @class = "form-control premium-select", required = "required" })
                                        @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>

                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Payment Method</label>
                                        @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Select Payment Method==", new { id = "ddlSupplierPaymentMethodEnumFK", @class = "form-control premium-select", required = "required" })
                                        @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label for="txtDivisionValue" class="col-form-label">Project Value (Division)</label>
                                        @Html.EditorFor(model => model.DivisionValue, new { htmlAttributes = new { @class = "form-control premium-input", @id = "txtDivisionValue" } })
                                        @Html.ValidationMessageFor(model => model.DivisionValue, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="txtFinalDestination" class="col-form-label">Delivery Address</label>
                                        @Html.EditorFor(model => model.FinalDestination, new { htmlAttributes = new { @class = "form-control premium-input", @id = "txtFinalDestination" } })
                                        @Html.ValidationMessageFor(model => model.FinalDestination, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label for="txtDescription" class="col-form-label">Remarks:</label>
                                        @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Description", @class = "form-control premium-textarea", rows = 1 })
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger premium-error" })
                                    </div>
                                </div>
                            </div>

                            <!-- Submit Button -->
                            <div class="row">
                                <div class="col-md-4">

                                </div>
                                <div class="col-md-4">

                                </div>
                                <div class="col-md-4">
                                    <button type="submit" id="svvvvv" class="btn btn-primary" style="width:100%">Save</button>
                                </div>
                            </div>
                        </div>

                    }

                    <!--Body Will by Start Here-->

                </div>



                <div class="box-footer">
                    <span>
                        Project Division List
                    </span>
                    <div class="table-responsive text-nowrap">
                        <table id="" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>SL</th>
                                    <th>Division Name</th>
                                    <th>Project Amount</th>

                                    <th>Customer Phone</th>
                                    <th>Customer Email</th>


                                    <th>Delivery Address</th>
                                    <th>Officer Name</th>


                                    <th>Start date</th>
                                    <th>Expected Delivery date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{ int sl = 0; }
                                @foreach (var item in Model.DataListSlave)
                                {
                                    <tr>
                                        <td>@(++sl)</td>
                                        <td>@item.CustomerPONo</td>
                                        <td>@item.DivisionValue</td>
                                        <td>@item.DivisionValue</td>

                                        <td>@item.CustomerPhone</td>
                                        <td>@item.CustomerEmail</td>


                                        <td>@item.FinalDestination</td>
                                        <td>@item.OfficerNAme </td>


                                        <td>@item.OrderDate.ToString("dd-MMM-yyyy")</td>
                                        <td>@item.ExpectedDeliveryDate.Value.ToString("dd-MMM-yyyy")</td>
                                        <td>
                                            <a id="@item.ID"
                                               onclick="makeEditable(
           @item.OrderMasterId,
           '@Html.Raw(item.CustomerPONo)',
           '@Html.Raw(item.DivisionValue)',
           '@Html.Raw(item.OfficerNAme)',
           '@Html.Raw(item.SalePersonId)',
           '@Html.Raw(item.CommonCustomerName)',
           '@Html.Raw(item.CustomerId)',
           '@item.OrderDate.ToString("yyyy-MM-dd")',
           '@(item.ExpectedDeliveryDate.HasValue ? item.ExpectedDeliveryDate.Value.ToString("yyyy-MM-dd") : "")',
           @item.StockInfoId,
           @item.CustomerPaymentMethodEnumFK,
           @item.TotalAmount,
           '@Html.Raw(item.FinalDestination)',
           '@Html.Raw(item.Remarks)'
       );"
                                               class="linkPointer"
                                               title="Edit">
                                                <i class="fa fa-pencil-square-o"></i>
                                            </a>

                                            <a id="@item.ID" onclick="makeDeletable(@item.OrderMasterId);" class="linkPointer" data-toggle="modal" data-target="#deleteModal" title="Delete">
                                                <i class="glyphicon glyphicon-trash" aria-hidden="true"></i>
                                            </a>

                                            <a href="~/Procurement/PackagingSalesOrderSlave?companyId=@item.CompanyFK&orderMasterId=@item.OrderMasterId" class="btn btn-success btn-sm">Manage BBQ Item</a>


                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>




</section>



@section scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
<script type="text/javascript">
        function calculateAmount() {

            var salesQuantity = $("#txtSalesQuantity").val();
            var unitPrice = $('#txtUnitPrice').val();

            var quantityInKg = (Number(salesQuantity) * Number(unitPrice));
            $('#txtTotalAmount').val(Number((quantityInKg).toFixed(3)))
        }


        function makeDeletale(rowId) {
            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
                                                    }
        function resetProcurementPurchaseRequisitionSlaveForm() {
            $('#procurementSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }


        $(document).ready(function () {
            //$('.formValidator').bootstrapValidator();
            $('.datepicker').datepicker({
                dateFormat: "dd/mm/yy",
                showOn: 'both',
                buttonText: "<i class='fa fa-calendar'></i>",
                changeMonth: true,
                changeYear: true,
                yearRange: "2001:+50"
            });


            var orderMasterIdInit = "@Model.OrderMasterId";
            if (orderMasterIdInit > 0) {
                $('#txtProductName').focus();
            }


            $('#procurementSalesOrderSlaveFormId').on('keyup keypress', function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });
            $('#tblStockAvailable').hide();
            $('#datePickerById').datepicker({
                format: "yyyy-mm-dd",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {
                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });


              $("#txtProductName").autocomplete({
                source: function (request, response) {
                    //console.log(request);
                    //console.log(response);

                    $.ajax({
                        url:"@Url.Action("AutoCompleteFinishedGoodsGet", "Configuration")",// '/AccountHeads/AutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { companyId: "@Model.CompanyFK", prefix: request.term },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },

            select: function (e, i) {
                console.log(i);
                    $("#ddlRProductFK").val(i.item.val);

                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("ProductStockByProduct", "Procurement")",
                        datatype: "Json",
                        data: { companyId: "@Model.CompanyFK", productId: i.item.val },
                        success: function (data) {
                            console.log(data);
                            var items = "";
                            if (data) {
                                $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);
                                $('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);
                                $("#txtUnitPrice").val(data.UnitPrice);
                                $("#txtPackSize").val(data.PackSize);

                            }
                        }
                    });
                $('#txtSalesQuantity').focus();
                $('#txtSalesQuantity').select();


                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });



            $('#txtOrderDate').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#ddlSupplierPaymentMethodEnumFK').focus();
                }
            });

            $('#txtDeliveryDate').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtFinalDestination').focus();
                }
            });
            $('#txtFinalDestination').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtCourierNo').focus();
                }
            });
            $('#txtCourierNo').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtCourierCharge').focus();
                    $('#txtCourierCharge').select();
                }
            });
            $('#txtCourierCharge').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtDescription').focus();
                }
            });
            $('#txtDescription').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtProductName').focus();
                }
            });

            $('#txtPackQuantity').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtConsumption').focus();
                }
            });
            $('#txtConsumption').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtUnitPrice').focus();
                    $('#txtUnitPrice').select();

                }
            });
            $('#txtUnitPrice').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#poCreateBtn').click();
                }
            });



            $("#TermsAndConditionid").change(function () {
                                                            var termsAndConditionid = $('#TermsAndConditionid').val();
                $.ajax({
                                                            type: "GET",
                    url: "@Url.Action("GetTermNCondition", "Procurement")",
                    datatype: "Json",
                    data: { id: termsAndConditionid },
                    success: function (data) {
                        $('#txtTermsAndCondition').empty();
                        $('#txtTermsAndCondition').append(data.description);

                                                                }
                                                            });
                                                        });



            $("#ddlSupplierPaymentMethodEnumFK").change(function () {
                var paymethod = $("#ddlSupplierPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }

            })


        });
            function makeEditble(rowId) {
                console.log(rowId);
            $.ajax({

                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {
                      console.log(data);
                      $('#poCreateBtn').html("<i class='fa fa-edit'></i>&nbsp;Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductName);
                      $("#ddlRProductFK").val(data.FProductId);
                      $("#txtPackQuantity").val(data.PackQuantity);
                      $("#txtConsumption").val(data.Consumption);

                      $("#txtPurchaseQuantity").val(data.Qty);
                      $('#txtUnitPrice').val(data.UnitPrice);
                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }
                 });
            }

        function makeSubmitble(rowId) {
                // console.log(rowId);
                $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                        datatype: "Json",
                    data: { orderMasterId: rowId },
                        success: function (data) {
                            console.log(data);
                            $('#submitOrDraftPOCIDText').text(data.OrderNo);

                            if (data.Status == 0) {
                                $('.submitOrDraftText').text("Make Submit");
                            }
                            else {
                                $('.submitOrDraftText').text("Make Draft");

                            }
                        }
                 });
                $('#hidsubmitProcurementPurchaseOrderId').val(rowId);
        }










          @*$("#ddlSubZoneFk").change(function () {
                var subZoneFk = $("#ddlSubZoneFk").val();
                $.ajax({
                type: "GET",
                url: "@Url.Action("CustomerLisBySubZonetGet", "Procurement")",
                datatype: "Json",
                    data: { subZoneId: subZoneFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });

                 $.ajax({
                type: "Get",
                url: "@Url.Action("OfficerofTerritoryName", "Procurement")",
                datatype: "Json",
                     data: { SubzoneId: subZoneFk },
                success: function (data) {
                    console.log(data);
                    $("#txtOfficerName").val(data.EmployeeName)
                    $("#personid").val(data.EmpId)
                    //var select = $("#Subzonevalue");
                    //select.children().remove();
                    //select.append($("<option>").val('').text('Select SubZone'));
                    //$(data.SubZoneList).each(function (index, item) {
                    //    select.append($("<option data-toggle='tooltip' title='" + item.Value + "'>").val(item.Value).text(item.Text));
                   /* });*/
                    return false;
                    }
                });
            })*@



        $("#VendorName").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '/Employee/VendorAutoCompleteByCompany/',
                //data: "{ 'prefix': '" + request.term + "'}",
                data: '{"prefix":"' + request.term + '", "CompanyId":@Model.CompanyFK}',
                dataType: "json",
                type: "POST",
                cache: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    response($.map(data, function (item) {
                        return item;
                    }))
                },
                error: function (response) {
                    //alert(response.responseText);
                },
                failure: function (response) {
                    //alert(response.responseText);
                }
            });
        },
        select: function (e, i) {
            $("#Vendor").val(i.item.val);
        },
        minLength: 1,
        cache: true

    }).focus(function () {
        $(this).autocomplete("search");
    });





      $(function () {
          $("#OfficerNAme").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '/Employee/EmployeeAutoCompleteByCompany/',
                //data: "{ 'prefix': '" + request.term + "'}",
                data: '{"prefix":"' + request.term + '", "CompanyId":@Model.CompanyFK}',
                dataType: "json",
                type: "POST",
                cache: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    response($.map(data, function (item) {
                        return item;
                    }))
                },
                error: function (response) {
                    //alert(response.responseText);
                },
                failure: function (response) {
                    //alert(response.responseText);
                }
            });
        },
        select: function (e, i) {
            $("#SalePersonId").val(i.item.val);
        },
        minLength: 1,
        cache: true

    }).focus(function () {
        $(this).autocomplete("search");
    });
});




        function makeEditable(id, customerPONo, divisionValue, officerName, salePersonId, commonCustomerName, customerId, orderDate, expectedDeliveryDate, stockInfoId, paymentMethodEnumFK, totalAmount, finalDestination, remarks) {



            document.getElementById('txtCustomerPONo').value = customerPONo;
            document.getElementById('hidOrderMasterId').value = id;
            document.getElementById('txtDivisionValue').value = divisionValue; // Add this field if it exists
            document.getElementById('OfficerNAme').value = officerName;
            document.getElementById('SalePersonId').value = salePersonId;
            document.getElementById('VendorName').value = commonCustomerName;
            document.getElementById('Vendor').value = customerId;
            document.getElementById('txtOrderDate').value = orderDate;
            document.getElementById('txtDeliveryDate').value = expectedDeliveryDate;
            document.getElementById('ddlWareHouseFk').value = stockInfoId;
            document.getElementById('ddlSupplierPaymentMethodEnumFK').value = paymentMethodEnumFK;

            document.getElementById('txtFinalDestination').value = finalDestination;
            document.getElementById('txtDescription').value = remarks;
            document.getElementById('ActionId').value = 2;

            document.getElementById('svvvvv').innerHTML = "Update";
        }





        function makeDeletable(id) {
            // Show confirmation alert
            if (confirm("Are you sure you want to delete this item?")) {
                // Prepare data to send to the server
                var data = {
                    OrderMasterId: id,
                    ActionEum: 3,
                    CompanyId:@Model.CompanyFK,
                    CostCenterId: @Model.CostCenterId
                };

                $.ajax({
                    type: 'POST',
                    url: '/Procurement/DeleteProcurementSalesOrderSlaveTCL', // Adjust the URL to your controller
                    data: data,
                    success: function (response) {
                        // Optionally handle success, e.g., reload the table or redirect
                        window.location.reload(); // Reload the page to see the changes
                    },
                    error: function (xhr, status, error) {
                        alert("An error occurred while deleting the item: " + error);
                    }
                });
            }
        }









</script>
}